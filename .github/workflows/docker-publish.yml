name: Monitor and Update Alephium Image

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allows you to trigger the workflow manually

jobs:
  check-for-updates:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Clone the Alephium Stack repository
      - name: Checkout Alephium Stack
        uses: actions/checkout@v2
        with:
          repository: alephium/alephium-stack
          path: alephium-stack

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 3: Check if the file `latest_alephium_version` exists, and create it if not
      - name: Check/Create Version File
        run: |
          if [ ! -f latest_alephium_version ]; then
            echo "latest_alephium_version not found, creating the file."
            echo "0.0.0" > latest_alephium_version  # Initialize with a dummy version if file doesn't exist
          fi

      # Step 4: Extract the current Alephium image version from the Alephium Stack repo
      - name: Check Alephium Docker Image Version
        id: check_version
        run: |
          cd alephium-stack/mainnet
          # Extract the version from the docker-compose.yml file
          current_version=$(grep 'image: alephium/alephium:' docker-compose.yml | awk -F: '{print $3}')
          echo "Current Alephium image version: $current_version"
          # Compare with the version stored in `latest_alephium_version`
          previous_version=$(cat ../../latest_alephium_version)
          echo "Previous Alephium image version: $previous_version"
          if [[ "$current_version" == "$previous_version" ]]; then
            echo "No new version detected. Skipping build."
            exit 0
          fi
          # Set the current version as an output for later steps
          echo "::set-output name=current_version::$current_version"

      # Step 5: Build and push the new Docker image if a new version is detected
      - name: Build and Push Docker Image
        run: |
          cd alephium-stack/mainnet
          # Build the image with the new version
          docker-compose build --no-cache
          # Tag the image with the new version and push it to Docker Hub
          docker tag cyxeio/alphnode_test:latest cyxeio/alphnode_test:${{ steps.check_version.outputs.current_version }}
          docker push cyxeio/alphnode_test:${{ steps.check_version.outputs.current_version }}
          docker push cyxeio/alphnode_test:latest

      # Step 6: Update the `latest_alephium_version` file after a successful push
      - name: Update Version File
        run: |
          echo "${{ steps.check_version.outputs.current_version }}" > latest_alephium_version
          echo "Updated latest_alephium_version to ${{ steps.check_version.outputs.current_version }}"

      # Step 7: Clean up unused Docker images
      - name: Cleanup Docker Images
        run: docker image prune -f
