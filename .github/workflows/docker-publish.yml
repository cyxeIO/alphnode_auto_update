name: Monitor and Update Alephium Mainnet Docker Images

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allows you to trigger the workflow manually

jobs:
  pull-tag-and-push-image:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Your Docker Hub username
          password: ${{ secrets.DOCKER_PASSWORD }}  # Your Docker Hub password

      # Step 2: Fetch the latest Alephium Docker image version
      - name: Fetch Latest Alephium Version
        id: fetch_version
        shell: bash
        run: |
          # Fetch latest version from Docker Hub
          LATEST_VERSION=$(curl -s https://hub.docker.com/v2/repositories/alephium/alephium/tags/?page_size=1 | jq -r '.results[0].name')
          echo "Fetched version: $LATEST_VERSION"
          
          if [[ -z "$LATEST_VERSION" ]]; then
            echo "Error: Could not fetch a valid version from Docker Hub"
            exit 1
          fi
          
          echo "::set-output name=version::$LATEST_VERSION"

      # Step 3: Pull the latest Alephium Docker image based on the fetched version
      - name: Pull Latest Alephium Docker Image
        run: |
          docker pull alephium/alephium:${{ steps.fetch_version.outputs.version }}

      # Step 4: Fetch the latest snapshot URL from _latest_with-indexes.txt
      - name: Fetch Latest Snapshot URL
        id: fetch_snapshot
        run: |
          BASE_URL="https://alephium-archives.org/archives/mainnet/full-node-data"
          SNAPSHOT_FILE=$(curl -s ${BASE_URL}/_latest_with-indexes.txt)
          if [[ -z "$SNAPSHOT_FILE" ]]; then
            echo "Error: Could not fetch latest snapshot file."
            exit 1
          fi
          SNAPSHOT_URL="${BASE_URL}/${SNAPSHOT_FILE}"
          echo "Latest Snapshot URL: $SNAPSHOT_URL"
          echo "::set-output name=snapshot_url::$SNAPSHOT_URL"

      # Step 5: Create a custom Dockerfile to load the latest snapshot inline
      - name: Create Custom Dockerfile with Snapshot Loading
        run: |
          cat <<EOF > Dockerfile
          FROM alephium/alephium:${{ steps.fetch_version.outputs.version }}
          
          ENV ALEPHIUM_HOME=/alephium-home/.alephium
          ENV ALEPHIUM_NETWORK=mainnet
          
          # Switch to root to install necessary packages
          USER root
          
          # Fix permissions issue and install curl
          RUN mkdir -p /var/lib/apt/lists/partial && \
              apt-get update --no-cache && apt-get install -y curl && \
              curl -L "${{ steps.fetch_snapshot.outputs.snapshot_url }}" | tar -xzf - -C \$ALEPHIUM_HOME
          
          # Switch back to non-root user
          USER alephium
          
          ENTRYPOINT ["/bin/bash", "-c", "/alephium/bin/alephium-entrypoint.sh"]
          EOF

      # Step 6: Build the custom Docker image with snapshot loaded inline
      - name: Build Docker Image with Snapshot
        run: |
          docker build -t dohmoney/mainnet:latest .

      # Step 7: Tag the Docker image
      - name: Tag Docker Image
        run: |
          docker tag dohmoney/mainnet:latest dohmoney/mainnet:${{ steps.fetch_version.outputs.version }}
          docker tag dohmoney/mainnet:latest dohmoney/mainnet:$(date +%Y%m%d%H%M)

      # Step 8: Verify the tags created locally before pushing
      - name: List Docker Images and Tags
        run: docker images

      # Step 9: Push the newly tagged image to your Docker Hub repository
      - name: Push Docker Image to Docker Hub
        run: |
          docker push dohmoney/mainnet:latest
          docker push dohmoney/mainnet:${{ steps.fetch_version.outputs.version }}
          docker push dohmoney/mainnet:$(date +%Y%m%d%H%M)

      # Step 10: Clean up unused Docker images to save space
      - name: Cleanup Docker Images
        run: docker image prune -f
